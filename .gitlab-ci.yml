include:
  project: 'infrastructure/gitops'
  file: '/.gitlab/ci-templates/git-push.gitlab-ci.yaml'

image: maven:3.8.5-openjdk-17-slim

variables:
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository


stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - publish
  - deploy
  - deploy-prd

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - mvn package '-Dmaven.test.skip=true' $MAVEN_OPTS
  cache:
    - key:
      paths:
        - .m2/repository
  artifacts:
    when: always
    expire_in: 2 days
    paths:
      - "target/*.jar"
  only:
    - /QA-.+/
    
# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - mvn test $MAVEN_OPTS
#   cache:
#     - key:
#       paths:
#         - .m2/repository
#   artifacts:
#     when: always
#     paths:
#       - "target/surefire-reports/TEST-*.xml"
#     reports:
#       junit: "target/surefire-reports/TEST-*.xml"
    
sonarqube-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_TOKEN: $SONAR_TOKEN
    SONAR_HOST_URL: "http://192.168.222.182:9000"
    GIT_DEPTH: 0
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} '-Dmaven.test.skip=true' $MAVEN_OPTS
  cache:
    - key:
      paths:
        - .m2/repository
    - key: $CI_JOB_NAME
      paths:
        - .sonar/cache
    
publish-job:      # This job runs in the deploy stage.
  stage: publish  # It only runs when *both* jobs in the test stage complete successfully.
  environment: qa
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  only:
    - /QA-.+/
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "asia.gcr.io/mthis-296015/${PACKAGE_NAME}:${CI_COMMIT_TAG}"

deploy-job:
  extends: .git:push
  stage: deploy
  only:
    - /QA-.+/
  script: echo "successfully deploy"

deploy-prod-job:      # This job runs in the deploy stage.
  stage: deploy-prd  # It only runs when *both* jobs in the test stage complete successfully.
  image:
    name: alpine/git:latest
  variables:
    _PACKAGE_NAME: bpjsservice
  script:
    - echo "Deploying application bpjsservice"
    - mkdir /root/.ssh
    - echo "$SSH_KEY" > /root/.ssh/id_rsa
    - chmod 400 /root/.ssh/id_rsa
    - eval `ssh-agent -s`
    - ssh-add /root/.ssh/id_rsa
    - ssh-keyscan -p 2022 source.developers.google.com > /root/.ssh/known_hosts
    - cd /home
    - git config --global user.email "williandy@rsmurniteguh.com"
    - git config --global user.name "Williandy"
    - git clone --depth 1 ssh://williandy@rsmurniteguh.com@source.developers.google.com:2022/p/mthis-296015/r/mtmh-cluster-config
    - cd mtmh-cluster-config/namespaces/his-services
    - sed -i s+mthis-296015/bpjsservice.*+mthis-296015/bpjsservice:$CI_COMMIT_TAG+g deployment-$_PACKAGE_NAME.yaml
    - git add -A
    - git commit -m 'Update version'
    - git push
  rules:
    - if: '$CI_COMMIT_TAG =~ /^PRD-/'
      when: manual 